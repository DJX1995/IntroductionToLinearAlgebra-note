}
p_S_with_I <- function(i,s) {
t <- data.frame(i = c(0,0,1,1),
s = c(0,1,0,1),
p = c(.95,.05,.2,.8))
t[t$i==i & t$s==s,"p"]
}
p_I <- function(i) {
if(0 == i) 0.7
else if(1 == i) 0.3
else -1
}
p_D <- function(d) {
if(0 == d) 0.6
else if(1 == d) 0.4
else -1
}
p_S_with_I <- function(i,s) {
t <- data.frame(i = c(0,0,1,1),
s = c(0,1,0,1),
p = c(.95,.05,.2,.8))
t[t$i==i & t$s==s,"p"]
}
p_L_with_G <- function(g,l) {
t <- data.frame(g = c(1,1,2,2,3,3),
l = c(0,1,0,1,0,1),
p = c(.1,.9,.4,.6,.99,.01))
t[t$g==g & t$l == l,"p"]
}
p_G_with_I_D <- function(i,d,g) {
t <- data.frame(i = c(0,0,0,0,0,0,
1,1,1,1,1,1),
d = c(0,0,0,
1,1,1,
0,0,0,
1,1,1),
g = c(1,2,3,
1,2,3,
1,2,3,
1,2,3),
p = c(.3,.4,.3,
.05,.25,.7,
.9,.08,.02,
.5,.3,.2))
t[t$i==i & t$d == d & t$g == g,"p"]
}
p_stu <- function(i,d,g,s,l) {
p_I(i)*p_D(d)*p_G_with_I_D(i,d,j)*p_S_with_I(i,s)*p_L_with_G(g,l)
}
p_d1_g3 <- 0
for(i in c(0,1)) {
for(s in c(0,1)){
for(l in c(0,1)){
p_d1_g3 = p_d1_g3 + p_stu(i,d=1,g=3,s,l)
}
}
}
p_d1_g3
p_stu <- function(i,d,g,s,l) {
p_I(i)*p_D(d)*p_G_with_I_D(i,d,g)*p_S_with_I(i,s)*p_L_with_G(g,l)
}
p_d1_g3 <- 0
for(i in c(0,1)) {
for(s in c(0,1)){
for(l in c(0,1)){
p_d1_g3 = p_d1_g3 + p_stu(i,d=1,g=3,s,l)
}
}
}
p_d1_g3
p_d1_g3 / (1.22 / 4)
p_g3 <- 0
for(i in c(0,1)) {
for(s in c(0,1)){
for(l in c(0,1)){
for(d in c(0,1)){
p_g3 = p_g3 + p_stu(i,d,g=3,s,l)
}
}
}
}
p_g3
p_d1_g3/p_g3
p_d1_g3 / (1.22 / 4)
1 / (1 + (c_1 + c_2*beta)*exp(-beta*t))
diffusion_rate <- function(t, beta, c_1, c_2) {
1 / (1 + (c_1 + c_2*beta)*exp(-beta*t))
}
i <- function(t, beta, c_1, c_2) {
1 / (1 + (c_1 + c_2*beta)*exp(-beta*t))
}
curve_date <- function(t_seq, beta, c_1, c_2) {
sapply(t_seq, i, beta, c_1, c_2)
}
curve_date <- function(t_seq, beta, c_1, c_2) {
i_seq <- sapply(t_seq, i, beta, c_1, c_2)
param <- sprintf("beta=%.2f,c1=%.2f,c2=%.2f")
data.frame(time=t_seq, rate=i_seq, type=param)
}
t_seq <- seq(-100, 100, by=0.1)
head(curve_date(t_seq, 0.14,1,10))
curve_date <- function(t_seq, beta, c_1, c_2) {
i_seq <- sapply(t_seq, i, beta, c_1, c_2)
param <- sprintf("beta=%.2f,c1=%.2f,c2=%.2f", beta, c_1, c_2)
data.frame(time=t_seq, rate=i_seq, type=param)
}
t_seq <- seq(-100, 100, by=0.1)
head(curve_date(t_seq, 0.14,1,10))
?rbind
rst <- rbind(
curve_date(t_seq, beta = 0.15, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 0, c_2 = 1),
curve_date(t_seq, beta = 0.75, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.75, c_1 = 10, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 0, c_2 = 10),
)
rst <- rbind(
curve_date(t_seq, beta = 0.15, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 0, c_2 = 1),
curve_date(t_seq, beta = 0.75, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.75, c_1 = 10, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 0, c_2 = 10)
)
dim(rst)
head(rst)
class(rst)
dim(rst)
nrow(rst)
ncol(rst)
p <- ggplot(rst, aes(x=time, y=rate, color = type))
2
require(ggplot2)
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line()
p
?geom_line
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=3)
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=5))
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p
rst <- rbind(
curve_date(t_seq, beta = 1, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 1, c_1 = 50, c_2 = 0)
)
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p
t_seq <- seq(-50, 50, by=0.1)
rst <- rbind(
curve_date(t_seq, beta = 1, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 0.15, c_1 = 1, c_2 = 0),
curve_date(t_seq, beta = 1, c_1 = 50, c_2 = 0),
curve_date(t_seq, beta = 1, c_1 = 1, c_2 = 10)
)
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p
?legend
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p <- p + guid_legend(color = "参数")
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p <- p + guid_legend(color = "参数")
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p <- p + guide_legend(color = "参数")
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + theme(legend.text=element_text(size=15))
p <- p + guides(color = guide_legend(title = "参数"))
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数"))
p <- p + ggtitle("传播速率函数参数演示") + xlab("时间") + ylab("传播占比")
p <- p + theme(legend.text=element_text(size=15))
p
?theme
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数"))
p <- p + ggtitle("传播速率函数参数演示") + xlab("时间") + ylab("传播占比")
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=14))
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数"))
p <- p + ggtitle("传播速率函数参数演示") + xlab("时间") + ylab("传播占比")
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=15))
p
?theme
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数"))
p <- p + ggtitle("传播速率函数参数演示") + xlab("时间") + ylab("传播占比")
p <- p + scale_x_continuous(breaks=seq(min(t_seq),max(t_seq), by = 5))
p <- p + scale_x_continuous(breaks=seq(0,1, by = 0.1))
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=15))
p
max(t_seq)
min(t_seq)
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数"))
p <- p + ggtitle("传播速率函数参数演示") + xlab("时间") + ylab("传播占比")
p <- p + scale_x_continuous(breaks=seq(min(t_seq),max(t_seq), by = 5))
p <- p + scale_y_continuous(breaks=seq(0,1, by = 0.1))
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=15))
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数组合"))
p <- p + ggtitle("传播速率曲线") + xlab("时间") + ylab("传播占比")
p <- p + scale_x_continuous(breaks=seq(min(t_seq),max(t_seq), by = 5))
p <- p + scale_y_continuous(breaks=seq(0,1, by = 0.1))
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=15))
p
p <- ggplot(rst, aes(x=time, y=rate, color = type))
p <- p + geom_line(size=1.5)
p <- p + guides(color = guide_legend(title = "参数组合"))
p <- p + ggtitle("传播速率曲线") + xlab("时间") + ylab("传播占比")
p <- p + scale_x_continuous(breaks=seq(min(t_seq),max(t_seq), by = 5))
p <- p + scale_y_continuous(breaks=seq(0,1, by = 0.1))
p <- p + theme(legend.text=element_text(size=15),
text = element_text(size=15),
legend.position="bottom")
p
L <- function(theta) {
theta^3(1-theta)^2
}
theta <- seq(0,1, by = 0.001)
d <- data.frame(theta=theta, prob = sapply(theta,L))
L <- function(theta) {
theta^3(1-theta)^2
}
theta <- seq(0,1, by = 0.001)
d <- data.frame(theta=theta, prob = sapply(theta,L))
sapply(theta,L)
L
L(0.1)
L <- function(theta) {
theta^3*(1-theta)^2
}
theta <- seq(0,1, by = 0.001)
d <- data.frame(theta=theta, prob = sapply(theta,L))
require(ggplot2)
qplot(x=theta, y=prob, data = d,geom='line')
256.53-233.33
50000-44014.65
50000-44014.65-6025.42
50000-44014.65-6002.22
sin(pi)
round(sin(pi), 3)
round(sin(2*pi), 3)
round(sin(3.1324*2*pi), 3)
round(sin(3*2*pi), 3)
round(sin(2*2*pi), 3)
round(sin(3*2*pi), 3)
round(sin(4*2*pi), 3)
sigmoid
require(pracma)
sigmoid
?sigmoid
install.packages("sigmoid")
require(pracma)
install.packages("sigmoid")
install.packages("sigmoid")
require(pracma)
install.packages("sigmoid")
require(pracma)
install.packages("d:")
install.packages(sigmoid)
install.packages("d:\\sigmoid_0.1.0.zip")
system.time(c(sum(dd$x),sum(dd$y))) # vertocrize
system.time(apply(dd,2,sum)) # build-in function
system.time(add_col(dd)) # iterate row by row
n <- 1e5
dd <- data.frame(x=seq(1.0,n,by=1),y=seq(1.0,n,by=1))
add_col <- function(dd) {
sum1 <- 0.0
sum2 <- 0.0
for(i in 1:nrow(dd)) {
sum1 <- sum1 + dd[i,1]
sum2 <- sum2 + dd[i,2]
}
c(sum1, sum2)
}
system.time(c(sum(dd$x),sum(dd$y))) # vertocrize
system.time(apply(dd,2,sum)) # build-in function
system.time(add_col(dd)) # iterate row by row
a <- read.table('clipboard')
a
a <- read.table('clipboard',col.names = c('date','type','num'))
head(a)
require(ddply)
require(plyr)
ddply(a,.(date), function(x) c(total = sum(x$num)))
t <- ddply(a,.(date), function(x) c(total = sum(x$num)))
t
join
join(a,t,by='date')
at <- join(a,t,by='date')
head(at)
at$rate <- with(at, num / total)
at
at[at$type == 1,]
at[at$type == 0,]
at[at$type == 2,]
at[at$type == 3,]
at[at$type == 4,]
at[at$type == 5,]
A <- matrix(c(-1,2,2,
-1,-4,-2,
-3,9,7),byrow = T)
A <- matrix(c(-1,2,2,
-1,-4,-2,
-3,9,7),byrow = T,nrow=3)
A
v_0 <- matrix(rnorm(3))
v_0
rst <- matrix
v <- v_0
rst <- matrix()
k <- 10
rst <- matrix()
v <- v_0
for(i in 1:k) {
v <- A %*% v
rst <- cbind(rst, v)
}
k <- 10
rst <- data.frame()
v <- v_0
for(i in 1:k) {
v <- A %*% v
rst <- rbind(rst, v)
}
t(rst)
lambda <- matrix(rep(0,3))
lambda
v <- v_0
lambda <- matrix(rep(0,3))
for(i in 1:k) {
pre_v <- v
v <- A %*% v
lambda <- v / pre_v
}
lambda
k <- 100
v <- v_0
lambda <- matrix(rep(0,3))
for(i in 1:k) {
pre_v <- v
v <- A %*% v
lambda <- v / pre_v
}
lambda
eigen(A)
one(3)
eye
A_2 <- A - 3*diag(rep(0,3))
A_2 <- A - 3*diag(rep(0,3))
k <- 100
v <- v_0
lambda <- matrix(rep(0,3))
for(i in 1:k) {
pre_v <- v
v <- A_2 %*% v
lambda <- v / pre_v
}
lambda
A_2 <- A - 3*diag(rep(0,3))
A_2
A
3*diag(rep(0,3))
A_2 <- A - 3*diag(rep(1,3))
k <- 100
v <- v_0
lambda <- matrix(rep(0,3))
for(i in 1:k) {
pre_v <- v
v <- A_2 %*% v
lambda <- v / pre_v
}
lambda
eigen(A_2)
pre_v
v
v_0
eigen(A)
?norm
norm(v_0,2)
norm(v_0,'2')
v_0
u <- v_0
lambda <- matrix(rep(0,3))
for(i in 1:k) {
u <- A %*% u
u  <- u / norm(u, '2')
}
u
eigen(A)
u
A %*% x
A %*% u
t(u) %*% A %*% u
t(u) %*% A %*% u / t(u)  %*% u
t(u) %*% u
21.7+2.3+1.6+4.2+11.5
21.7+2.3+1.6+4.2+11.5+4.5+7.9
50000-6242.33
read.table('clipboard',row.names=c('hero_count','num'))
read.table('clipboard',sep='\t',row.names=c('hero_count','num'))
read.table('clipboard',sep='\t',row.names=c('hero_count','num'))
read.table('clipboard',sep='\t',header=F
)
a <- read.table('clipboard',sep='\t',header=F)
head(a)
names(a) <- c('hero','num')
a$cum_sum <- cumsum(a$num)
a <- a[order(a$num),]
head(a)
a$cum_sum <- cum_sum(a$num)
a$cum_sum <- cumsum(a$num)
head(a)
qplot(x=hero, y = num, stat='identity')
require(ggplot2)
qplot(x=hero, y = num, stat='identity')
qplot(x=hero, y = num, stat='identity') + geom_line()
qplot(x=hero, y = num,data=a, stat='identity') + geom_line()
require(igraph)
d <- data.frame(src=c(1,1,1,2,2,3,3,6,5),
rst=c(6,3,2,3,6,6,4,5,4),
w=c(11,9,7,10,15,2,2,9,6))
d
g <- graph_from_data_frame(d)
is.directed(g)
is.weighted(g)
g <- graph_from_data_frame(d,directed = F)
is.directed(g)
is.weighted(g)
E(g)$weight <- d$w
is.weighted(g)
g <- graph_from_data_frame(d,directed = F)
E(g)$weight <- d$w
is.directed(g)
is.weighted(g)
diameter(g)
g <- graph_from_data_frame(d,directed = T)
E(g)$weight <- d$w
is.directed(g)
is.weighted(g)
diameter(g)
A <- matrix(c(.9,.2,.1,.8),byrow=T,nrow=2)
u0 <- matrix(c(0,1000))
A_eig <- eigen(A)
print(A_eig)
solve(A_eig$vectors, u0)[1,1]*A_eig$vectors[,1] # 收敛后的向量
# 迭代验证
n <- 50
u <- u0
for(i in 1:n)
u <- A %*% u
if(i <= 3 || i >=n-3){
print(sprintf("i=%d",i))
print(u)
}
}
clear()
clean()
clean()
A <- matrix(c(.9,.2,.1,.8),byrow=T,nrow=2)
u0 <- matrix(c(0,1000))
A_eig <- eigen(A)
print(A_eig)
solve(A_eig$vectors, u0)[1,1]*A_eig$vectors[,1] # 收敛后的向量
# 迭代验证
n <- 50
u <- u0
for(i in 1:n) {
u <- A %*% u
if(i <= 3 || i >=n-3){
print(sprintf("i=%d",i))
print(u)
}
}
setwd("D:/dev/my_git/github/IntroductionToLinearAlgebra-note/notes")
